CREATE TABLE users (
                       id SERIAL PRIMARY KEY,
                       username VARCHAR(100) UNIQUE NOT NULL,
                       email VARCHAR(150) UNIQUE NOT NULL,
                       password TEXT NOT NULL,
                       balance NUMERIC(12, 2) DEFAULT 0,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_users_username ON users(username);

CREATE TABLE roles (
                       id SERIAL PRIMARY KEY,
                       name VARCHAR(50) UNIQUE NOT NULL
);
CREATE TABLE user_roles (
                            user_id INT REFERENCES users(id) ON DELETE CASCADE,
                            role_id INT REFERENCES roles(id) ON DELETE CASCADE,
                            PRIMARY KEY (user_id, role_id)
);

CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_role_id ON user_roles(role_id);
CREATE TABLE products (
                          id SERIAL PRIMARY KEY,
                          name VARCHAR(200) NOT NULL,
                          base_price NUMERIC(12, 2) NOT NULL,  -- giá của nhà in
                          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_products_name ON products(name);
CREATE TABLE product_prices (
                                id SERIAL PRIMARY KEY,
                                product_id INT REFERENCES products(id) ON DELETE CASCADE,
                                rank VARCHAR(50),         -- gold, platinum, diamond
                                size VARCHAR(20),         -- M, L, XL,...
                                sale_price NUMERIC(12, 2) NOT NULL,
                                UNIQUE (product_id, rank, size)
);

CREATE INDEX idx_product_prices_product ON product_prices(product_id);
CREATE INDEX idx_product_prices_rank_size ON product_prices(rank, size);
CREATE TYPE order_status AS ENUM ('pending_payment', 'order', 'processing', 'shipping', 'done', 'cancelled');

CREATE TABLE orders (
                        id SERIAL PRIMARY KEY,
                        sale_id INT REFERENCES users(id),
                        status order_status DEFAULT 'pending_payment',
                        total NUMERIC(12, 2) DEFAULT 0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_orders_sale_id ON orders(sale_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE TABLE order_items (
                             id SERIAL PRIMARY KEY,
                             order_id INT REFERENCES orders(id) ON DELETE CASCADE,
                             product_id INT REFERENCES products(id),
                             size VARCHAR(20),
                             rank VARCHAR(50),
                             quantity INT NOT NULL,
                             price NUMERIC(12, 2) NOT NULL
);

CREATE INDEX idx_order_items_order_id ON order_items(order_id);
CREATE INDEX idx_order_items_product_id ON order_items(product_id);
CREATE TYPE transaction_type AS ENUM ('deposit', 'payment', 'refund', 'income');

CREATE TABLE transactions (
                              id SERIAL PRIMARY KEY,
                              from_user_id INT REFERENCES users(id),
                              to_user_id INT REFERENCES users(id),
                              amount NUMERIC(12, 2) NOT NULL,
                              type transaction_type,
                              order_id INT REFERENCES orders(id),
                              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_transactions_from_user ON transactions(from_user_id);
CREATE INDEX idx_transactions_to_user ON transactions(to_user_id);
CREATE INDEX idx_transactions_order_id ON transactions(order_id);
CREATE TYPE deposit_status AS ENUM ('pending', 'approved', 'rejected');

CREATE TABLE deposit_requests (
                                  id SERIAL PRIMARY KEY,
                                  sale_id INT REFERENCES users(id),
                                  amount NUMERIC(12, 2) NOT NULL,
                                  status deposit_status DEFAULT 'pending',
                                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_deposit_requests_sale_id ON deposit_requests(sale_id);
CREATE INDEX idx_deposit_requests_status ON deposit_requests(status);
CREATE TABLE refresh_tokens (
                                id SERIAL PRIMARY KEY,
                                user_id INT REFERENCES users(id) ON DELETE CASCADE,
                                token TEXT NOT NULL,
                                expires_at TIMESTAMP NOT NULL,
                                is_revoked BOOLEAN DEFAULT FALSE
);

-- Tối ưu truy vấn
CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);
CREATE INDEX idx_refresh_tokens_token ON refresh_tokens(token);
